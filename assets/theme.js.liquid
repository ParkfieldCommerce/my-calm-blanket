var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

window.HeaderView = (function(superClass) {
  extend(HeaderView, superClass);

  function HeaderView() {
    return HeaderView.__super__.constructor.apply(this, arguments);
  }

  HeaderView.prototype.events = {
    "click .mobile-header-search-toggle": "toggleSearch",
    "blur .header-search-input": "toggleSearch"
  };

  HeaderView.prototype.initialize = function(options) {
    this.sectionBinding();
    return this.validate();
  };

  HeaderView.prototype.validate = function() {
    window.Pacific = {};
    Pacific.settings = {{ settings | json }};
    if (Pacific.settings["enable_currency_switcher"]) {
      return new CurrencyView({
        el: this.$(".currency-switcher")
      });
    }
  };

  HeaderView.prototype.sectionBinding = function() {
    this.$el.on('shopify:section:load', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-header')) {
          return;
        }
        _this.delegateEvents();
        return _this.validate();
      };
    })(this));
    return this.$el.on('shopify:section:unload', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-header')) {
          return;
        }
        return _this.undelegateEvents();
      };
    })(this));
  };

  HeaderView.prototype.toggleSearch = function() {
    var form;
    if (!(document.documentElement.clientWidth > 1020)) {
      form = this.$(".header-search-form");
      if (form.hasClass("active")) {
        return form.removeClass("active");
      } else {
        return form.addClass("active").find("input").focus();
      }
    }
  };

  return HeaderView;

})(Backbone.View);

window.CurrencyView = (function(superClass) {
  extend(CurrencyView, superClass);

  function CurrencyView() {
    return CurrencyView.__super__.constructor.apply(this, arguments);
  }

  CurrencyView.prototype.events = {
    "change [name=currencies]": "switchCurrency",
    "switch-currency": "switchCurrency"
  };

  CurrencyView.prototype.initialize = function() {
    var newCurrency;
    Currency.format = Shop.currencySwitcherFormat;
    Currency.money_with_currency_format = {};
    Currency.money_with_currency_format[Shop.currency] = Shop.moneyFormatCurrency;
    Currency.money_format = {};
    Currency.money_format[Shop.currency] = Shop.moneyFormat;
    newCurrency = Currency.cookie.read();
    if (newCurrency && this.$("[name=currencies] option[value=" + newCurrency + "]")) {
      Currency.currentCurrency = newCurrency;
    } else if (Shop.defaultCurrency) {
      Currency.currentCurrency = Shop.defaultCurrency;
      Currency.cookie.write(Shop.defaultCurrency);
    } else {
      Currency.currentCurrency = Shop.currency;
      Currency.cookie.write(Shop.currency);
    }
    $("[name=currencies]").val(Currency.currentCurrency);
    return $(window).load((function(_this) {
      return function() {
        var doubleMoney, j, l, len, len1, money, ref1, ref2;
        ref1 = $("span.money span.money");
        for (j = 0, len = ref1.length; j < len; j++) {
          doubleMoney = ref1[j];
          $(doubleMoney).parents("span.money").removeClass("money");
        }
        ref2 = $("span.money");
        for (l = 0, len1 = ref2.length; l < len1; l++) {
          money = ref2[l];
          $(money).attr("data-currency-" + Shop.currency, $(money).html());
        }
        return _this.switchCurrency();
      };
    })(this));
  };

  CurrencyView.prototype.switchCurrency = function(e) {
    var $switcher, j, len, money, newCurrency, ref1;
    $switcher = $("[name=currencies]");
    newCurrency = $switcher.val();
    if (e !== void 0) {
      $switcher = $(e.currentTarget);
      if ($switcher !== void 0 && ($switcher != null ? $switcher.attr('name') : void 0) === 'currencies') {
        newCurrency = $switcher.val();
      }
    }
    if (newCurrency === null || newCurrency === '') {
      newCurrency = Shop.currency;
    }
    ref1 = $("span.money");
    for (j = 0, len = ref1.length; j < len; j++) {
      money = ref1[j];
      $(money).html($(money).attr("data-currency-" + Shop.currency));
      $(money).attr("data-currency", Shop.currency);
    }
    Currency.convertAll(Shop.currency, newCurrency);
    Currency.currentCurrency = newCurrency;
    Currency.cookie.write(newCurrency);
    return this.$(".selected-currency").text(Currency.currentCurrency);
  };

  return CurrencyView;

})(Backbone.View);

window.NavigationView = (function(superClass) {
  extend(NavigationView, superClass);

  function NavigationView() {
    this.closeNavigation = bind(this.closeNavigation, this);
    this.toggleMegaNav = bind(this.toggleMegaNav, this);
    return NavigationView.__super__.constructor.apply(this, arguments);
  }

  NavigationView.prototype.events = {
    "click .mobile-navigation-toggle": "toggleMobileNavigation",
    "click .mobile-tier-toggle": "toggleMobileTier",
    "click .has-children > a": "changeTier",
    "click .mega-nav-breadcrumbs span": "previousTier",
    "click .bacon-menu-button": "baconMenu",
    "click .mega-nav > a": "toggleMegaNav",
    "click .has-dropdown > a": "toggleMegaNav"
  };

  NavigationView.prototype.initialize = function() {
    this.initializedClass = 'navigation-initialized';
    return this._validate();
  };

  NavigationView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  NavigationView.prototype._validate = function() {
    var isInitialized;
    this.body = $(document.body);
    this.navigation = $('.navigation', this.$el);
    isInitialized = this.$el.hasClass(this.initializedClass);
    this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
    this.checkDropdownWidth();
    this.setWindowWidth();
    if (this.$("li.mega-nav").length) {
      this.prepareMegaNav();
    }
    $(window).on("resize", (function(_this) {
      return function() {
        _this.setWindowWidth();
        if (_this.$("li.mega-nav").length) {
          _this.prepareMegaNav();
        }
        if (_this.navigation.hasClass("mobile-visible") && _this.windowWidth > 1020) {
          _this.navigation.removeClass("mobile-visible");
          return _this.resetHeights();
        }
      };
    })(this));
    $("body").on("click tap", (function(_this) {
      return function(event) {
        if (!($(event.target).parents(".mega-nav, .has-dropdown").length >= 1)) {
          return _this.closeNavigation();
        }
      };
    })(this));
    return $("body").keyup((function(_this) {
      return function(event) {
        if (event.keyCode === 27) {
          return _this.closeNavigation();
        }
      };
    })(this));
  };

  NavigationView.prototype.toggleMegaNav = function(event) {
    var $listItem;
    event.preventDefault();
    if ($(event.target).parents(".mega-nav").length >= 1) {
      this.setMegaNav;
    }
    $listItem = $(event.target).closest("li");
    $listItem.siblings().removeClass("active");
    if (!($listItem.hasClass("active") || $listItem.hasClass("open"))) {
      event.preventDefault();
    }
    return $listItem.toggleClass("active");
  };

  NavigationView.prototype.closeNavigation = function() {
    return $(".has-dropdown, .mega-nav").removeClass("active");
  };

  NavigationView.prototype.baconMenu = function(event) {
    var $linkItem, $menuWrapper;
    $linkItem = $(event.currentTarget);
    $menuWrapper = $linkItem.parents(".navigation-first-tier");
    $menuWrapper.find("li").css("height", "");
    return $(".bacon-menu-button.active").each(function() {
      var $current;
      $current = $(this);
      if ($current.next("div").is(":hidden")) {
        return $current.removeClass("active");
      }
    });
  };

  NavigationView.prototype.setWindowWidth = function() {
    return this.windowWidth = document.documentElement.clientWidth;
  };

  NavigationView.prototype.checkDropdownWidth = function() {
    var item, itemOffset, j, len, ref1, results;
    ref1 = this.$(".navigation-first-tier > .has-dropdown");
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      item = ref1[j];
      item = $(item);
      if (!item.hasClass("mega-nav")) {
        itemOffset = item.offset();
        if (item.find(".navigation-second-tier").length && itemOffset.left + 200 > this.windowWidth) {
          item.addClass("alternate-drop");
        }
        if (item.find(".navigation-third-tier").length && itemOffset.left + 400 > this.windowWidth) {
          item.addClass("alternate-drop");
        }
        if (item.find(".navigation-fourth-tier").length && itemOffset.left + 600 > this.windowWidth) {
          results.push(item.addClass("alternate-drop"));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  NavigationView.prototype.toggleMobileNavigation = function() {
    var firstTier, height;
    if (!this.navigation.hasClass("processed")) {
      $(window).on("resize", (function(_this) {
        return function() {
          return _.debounce(function() {
            if (_this.windowWidth > 1020) {
              return _this.resetHeights();
            }
          }, 500);
        };
      })(this));
      this.navigation.addClass("processed");
    }
    firstTier = this.$(".navigation-first-tier");
    if (this.navigation.hasClass("mobile-visible")) {
      if (this.body.hasClass("bacon-menu-loaded")) {
        this.navigation.find(".bacon-menu-button.active").each(function() {
          return $(this).trigger("click");
        });
        this.navigation.find(".bacon-highway-mobile.active").each(function() {
          return $(this).trigger("click");
        });
      }
      this.navigation.removeClass("mobile-visible");
      return this.resetHeights();
    } else {
      height = this.getHiddenHeight(firstTier);
      firstTier.addClass("open");
      return setTimeout(((function(_this) {
        return function() {
          _this.navigation.addClass("mobile-visible");
          $(".mobile-navigation-toggle").addClass("active");
          return firstTier.css("height", height);
        };
      })(this)), 50);
    }
  };

  NavigationView.prototype.toggleMobileTier = function(e) {
    var height, list, parent;
    e.preventDefault();
    e.stopPropagation();
    parent = $(e.target).closest(".has-dropdown, .mega-nav, .mega-nav-item, .has-children");
    list = parent.find("> ul");
    if (parent.hasClass("open")) {
      height = list.height();
      list.parents("ul").css("height", "-=" + height);
      list.find(".open").removeClass("open").find("> ul").css("height", "");
      if (Modernizr.csstransitions) {
        return list.height(0).one(this.transitionend, (function(_this) {
          return function() {
            return parent.removeClass("open");
          };
        })(this));
      } else {
        return parent.removeClass("open");
      }
    } else {
      height = this.getHiddenHeight(list);
      parent.addClass("open");
      list.css("height", height);
      return list.parents("ul").css("height", "+=" + height);
    }
  };

  NavigationView.prototype.getHiddenHeight = function(elem) {
    var height, temp;
    temp = $(elem).clone().addClass("cloned-list").appendTo(this.navigation);
    height = temp.height();
    temp.remove();
    return height;
  };

  NavigationView.prototype.resetHeights = function() {
    var $list, j, len, list, ref1;
    ref1 = this.$("ul");
    for (j = 0, len = ref1.length; j < len; j++) {
      list = ref1[j];
      $list = $(list);
      $list.parent("li").css("min-height", "");
      $list.css("min-height", "").css("height", "").parent().removeClass("open");
    }
    return $(".mobile-navigation-toggle").removeClass("active");
  };

  NavigationView.prototype.prepareMegaNav = function() {
    var navigationWidth;
    this.$el.toggleClass(this.initializedClass, true);
    this.megaNavDropdown = this.$(".mega-nav-dropdown");
    if (this.windowWidth > 1020) {
      navigationWidth = this.navigation.width();
      return this.megaNavDropdown.css({
        width: navigationWidth,
        marginLeft: -(navigationWidth / 2)
      });
    } else {
      return this.megaNavDropdown.css({
        top: "",
        width: "",
        marginLeft: ""
      });
    }
  };

  NavigationView.prototype.setMegaNav = function(e) {
    var firstTierHeight;
    if (this.windowWidth < 1021) {
      return;
    }
    firstTierHeight = this.megaNavDropdown.height();
    return this.megaNavDropdown.data("first-tier-height", firstTierHeight).height(firstTierHeight);
  };

  NavigationView.prototype.resetMegaNav = function(e) {
    if (this.windowWidth < 1021) {
      return;
    }
    if (e && $(e.relatedTarget).closest(".mega-nav").length) {
      return;
    }
    this.megaNavDropdown.height(this.megaNavDropdown.data("first-tier-height"));
    return this.$(".active").removeClass("active");
  };

  NavigationView.prototype.changeTier = function(e) {
    var currentHeight, nextTier, nextTierHeight;
    if (this.windowWidth < 1021) {
      return;
    }
    e.preventDefault();
    $(e.currentTarget).addClass("working");
    nextTier = $(e.currentTarget).next("ul");
    nextTierHeight = nextTier.outerHeight();
    currentHeight = this.megaNavDropdown.height();
    if (currentHeight < nextTierHeight) {
      this.megaNavDropdown.height(nextTierHeight);
    } else {
      nextTier.css({
        "bottom": 0
      });
    }
    return $(e.currentTarget).removeClass("working").addClass("active");
  };

  NavigationView.prototype.previousTier = function(e) {
    var previousTierHeight;
    if ($(e.currentTarget).hasClass("current-tier")) {
      return;
    }
    if ($(e.currentTarget).hasClass("first-tier")) {
      this.$(".active").removeClass("active");
      this.megaNavDropdown.height(this.megaNavDropdown.data("first-tier-height"));
    } else {
      $(e.currentTarget).closest("ul").siblings(".active").removeClass("active");
      previousTierHeight = $(e.currentTarget).closest(".mega-nav-second-tier").outerHeight();
      this.megaNavDropdown.height(previousTierHeight);
    }
    if (!this.$(".active").length) {
      return this.resetMegaNav();
    }
  };

  return NavigationView;

})(Backbone.View);

window.SlideshowView = (function(superClass) {
  extend(SlideshowView, superClass);

  function SlideshowView() {
    return SlideshowView.__super__.constructor.apply(this, arguments);
  }

  SlideshowView.prototype.events = {
    "click .previous-slide": "previousSlide",
    "click .next-slide": "nextSlide",
    "click .slideshow-pagination > span": "specificSlide",
    "mouseenter": "pauseLoop",
    "mouseleave": "startLoop"
  };

  SlideshowView.prototype.initialize = function() {
    this.initializedClass = 'slideshow-initialized';
    return this._validate();
  };

  SlideshowView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  SlideshowView.prototype._validate = function() {
    this.navigation = this.$(".slideshow-navigation", this.$el);
    this.pagination = this.$(".slideshow-pagination", this.$el);
    this.autoplay = parseInt($(".home-slideshow", this.$el).attr("data-slideshow-autoplay"), 10);
    this.setWindowWidth();
    this.setupSlides();
    return this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
  };

  SlideshowView.prototype.lockSlide = function(event) {
    this.slidesLocked = true;
    this.pauseLoop();
    this.specificSlideBlock(event);
    return this.selectedHeight(event);
  };

  SlideshowView.prototype.unlockSlide = function() {
    this.slidesLocked = false;
    return this.startLoop();
  };

  SlideshowView.prototype.setWindowWidth = function() {
    return this.windowWidth = document.documentElement.clientWidth;
  };

  SlideshowView.prototype.setupSlides = function() {
    var paginationWidth;
    this.slides = this.$(".slideshow-slide", this.$el);
    this.slideCount = this.slides.length;
    this.pagination.find("span:first").addClass("active");
    if (!Modernizr.csstransforms) {
      paginationWidth = this.pagination.width();
      this.pagination.css({
        marginLeft: -(paginationWidth / 2)
      });
    }
    return this.$el.imagesLoaded((function(_this) {
      return function() {
        var i, image, imageHeight, j, len, ref1, slide, slideContent, slideHeight, slideID, textHeight;
        ref1 = _this.slides;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          slide = ref1[i];
          slide = $(slide);
          slideID = slide.attr("id");
          image = slide.find(".slide-image", _this.$el);
          imageHeight = image.height();
          slide.data("height", imageHeight);
          slideHeight = _this.windowWidth <= 540 ? slide.height() : imageHeight;
          if (!Modernizr.csstransforms) {
            slideContent = slide.find(".slide-content");
            textHeight = slideContent.height();
            slideContent.css({
              marginTop: -(textHeight / 2)
            });
          }
          if (i === 0) {
            slide.addClass("active");
            $(".home-slideshow", _this.$el).height(slideHeight);
            _this.navigation.css({
              paddingTop: ((imageHeight - 48) / 2) + "px"
            });
            _this.resetPaginationPosition(imageHeight);
          }
          if (i + 1 === _this.slideCount) {
            $(".home-slideshow", _this.$el).addClass("slides-ready");
          }
        }
        $(window).on("resize", function() {
          _this.setWindowWidth();
          return _this.resetSlideHeights();
        });
        if (_this.autoplay > 0) {
          _this.delay = parseInt(_this.autoplay, 10) * 1000;
          return _this.startLoop();
        }
      };
    })(this));
  };

  SlideshowView.prototype.resetSlideHeights = function() {
    var image, imageHeight, j, len, ref1, results, slide, slideHeight;
    ref1 = this.slides;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      slide = ref1[j];
      slide = $(slide);
      image = slide.find(".slide-image");
      imageHeight = image.height();
      slide.css("height", "");
      slide.data("height", imageHeight);
      slideHeight = this.windowWidth <= 540 ? slide.height() : imageHeight;
      if (slide.hasClass("active")) {
        $(".home-slideshow", this.$el).height(slideHeight);
        this.navigation.css({
          paddingTop: ((imageHeight - 48) / 2) + "px"
        });
        results.push(this.resetPaginationPosition(imageHeight));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  SlideshowView.prototype.selectedHeight = function(event) {
    return $(event.target).imagesLoaded((function(_this) {
      return function() {
        return setTimeout((function() {
          var imageHeight;
          $('.slideshow-slide', _this.$el).removeClass('active');
          $(event.target).addClass('active');
          imageHeight = $(event.target).height();
          $('.home-slideshow', _this.$el).css({
            height: $(event.target).height()
          });
          return _this.navigation.css({
            paddingTop: ((imageHeight - 48) / 2) + "px"
          });
        }), 500);
      };
    })(this));
  };

  SlideshowView.prototype.resetPaginationPosition = function(height) {
    if (this.windowWidth <= 540) {
      return this.pagination.css({
        bottom: "auto",
        top: height - 50
      });
    } else {
      return this.pagination.css({
        bottom: 0,
        top: "auto"
      });
    }
  };

  SlideshowView.prototype.previousSlide = function(e) {
    if (this.sliding) {
      return;
    }
    this.showNewSlide("prev");
    return e.preventDefault();
  };

  SlideshowView.prototype.nextSlide = function(e) {
    if (this.sliding) {
      return;
    }
    this.showNewSlide("next");
    if (e) {
      return e.preventDefault();
    }
  };

  SlideshowView.prototype.specificSlideBlock = function(event) {
    var nextSlideID;
    nextSlideID = $(event.target).data("slide-id");
    return this.showNewSlide("next", nextSlideID);
  };

  SlideshowView.prototype.specificSlide = function(event) {
    var nextSlideID;
    if (!$(event.currentTarget).hasClass("active")) {
      nextSlideID = $(event.currentTarget).data("slide-id");
      console.log('pagination currentTarget', event.currentTarget);
      console.log('pagination next ID', nextSlideID);
      return this.showNewSlide("next", nextSlideID);
    }
  };

  SlideshowView.prototype.updateSlidePagination = function(index) {
    this.pagination.find(".active").removeClass("active");
    return this.pagination.find("> span").eq(index).addClass("active");
  };

  SlideshowView.prototype.showNewSlide = function(type, specificSlide) {
    var activeSlide, called, direction, fallback, imageHeight, nextSlide, slideHeight, slideID;
    this.sliding = true;
    called = false;
    if (this.slides.length === 1) {
      this.sliding = false;
      return;
    }
    direction = type === "next" ? "left" : "right";
    fallback = type === "next" ? "first" : "last";
    activeSlide = this.$(".slideshow-slide.active");
    nextSlide = specificSlide ? this.$("#" + specificSlide) : activeSlide[type]();
    nextSlide = nextSlide.length ? nextSlide : this.slides[fallback]();
    nextSlide.addClass(type);
    nextSlide[0].offsetWidth;
    activeSlide.addClass(direction);
    nextSlide.addClass(direction);
    if (Modernizr.csstransitions) {
      nextSlide.one(this.transitionend, (function(_this) {
        return function() {
          called = true;
          nextSlide.removeClass([type, direction].join(" ")).addClass("active");
          activeSlide.removeClass(["active", direction].join(" "));
          return _this.sliding = false;
        };
      })(this));
      setTimeout((function(_this) {
        return function() {
          if (!called) {
            return nextSlide.trigger(_this.transitionend);
          }
        };
      })(this), 300 + 10);
    } else {
      nextSlide.removeClass([type, direction].join(" ")).addClass("active");
      activeSlide.removeClass(["active", direction].join(" "));
      this.sliding = false;
    }
    imageHeight = nextSlide.data("height");
    this.updateSlidePagination(nextSlide.index());
    this.resetPaginationPosition(imageHeight);
    this.navigation.css({
      paddingTop: ((imageHeight - 48) / 2) + "px"
    });
    slideHeight = this.windowWidth <= 720 ? nextSlide.height() : imageHeight;
    slideID = nextSlide.attr('id');
    return $(".home-slideshow", this.$el).height(slideHeight);
  };

  SlideshowView.prototype.startLoop = function() {
    if (this.autoplay > 0) {
      if (!this.loop) {
        this.loop = true;
        return this.autoplayInt = setInterval((function(_this) {
          return function() {
            return _this.nextSlide();
          };
        })(this), this.delay);
      }
    }
  };

  SlideshowView.prototype.pauseLoop = function() {
    this.loop = false;
    return clearInterval(this.autoplayInt);
  };

  return SlideshowView;

})(Backbone.View);

window.SidebarView = (function(superClass) {
  extend(SidebarView, superClass);

  function SidebarView() {
    return SidebarView.__super__.constructor.apply(this, arguments);
  }

  SidebarView.prototype.events = {
    "click .has-children > a": "toggleDropdown"
  };

  SidebarView.prototype.initialize = function() {};

  SidebarView.prototype.toggleDropdown = function(e) {
    if (document.documentElement.clientWidth < 721) {
      e.preventDefault();
      $(e.target).parent().toggleClass("open");
      return false;
    }
  };

  return SidebarView;

})(Backbone.View);


/**
 * Get URLs to square versions of an Instagram photo.
 *
 * @param {*} photo The instagram photo object, as returned by their API.
 * @return Object An object with `small` and `large` URLs.
 */
function instagramSquared(photo) {
  var response = { small:'', large:'', thumbnail:'' };

  // At a bare minimum we need the following:
  if (!photo || !photo.images || !photo.images.standard_resolution) {
    console.error('Instagram: can not parse photo data.');
    return response;
  }

  // Set fallbacks in case we can't resize
  response.large = photo.images.standard_resolution.url;
  response.small = photo.images.low_resolution
    ? photo.images.low_resolution.url
    : photo.images.standard_resolution.url;
  response.thumbnail = photo.images.thumbnail
    ? photo.images.thumbnail.url
    : photo.images.standard_resolution.url;

  // We need the cropping information from the thumbnail URL
  if (!photo.images.thumbnail) return response;

  // Crop each size
  response.large = getSquareUrl(response.large, photo.images.thumbnail.url);
  response.small = getSquareUrl(response.small, photo.images.thumbnail.url);

  return response;
}

/**
 * Resize the template URL based off another URL's sizes.
 *
 * This pulls the size information from one URL (in a format like `s320x320`)
 * and and moves it to another URL.
 *
 * This lets us use the cropping information from one URL, and the sizing
 * information from another. Currently, only the thumbnail size has the crop
 * info, so the templateU
 *
 * @param url
 *        An Instagram photo URL to pull the sizing information from.
 *
 * @param templateUrl
 *        An Instagram photo URL that has cropping information.
 */
function getSquareUrl(url, templateUrl) {
  var sizes = url.match(/\/[ps]([0-9]+)x([0-9]+)\//);
  if (!sizes || sizes.length < 3) return templateUrl;

  var size = Math.round(Math.max(
    parseInt(sizes[1], 10),
    parseInt(sizes[2], 10)
  ));

  return templateUrl.replace(
    /\/[ps][0-9]+x[0-9]+\//,
    "/s" + size + "x" + size + "/"
  );
}
;

window.FooterView = (function(superClass) {
  extend(FooterView, superClass);

  function FooterView() {
    return FooterView.__super__.constructor.apply(this, arguments);
  }

  FooterView.prototype.initialize = function() {
    return this._validate();
  };

  FooterView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  FooterView.prototype._validate = function() {
    this.instagramToken = this.$(".footer-instagram").data('instagram-access-token');
    this.twitterId = this.$(".footer-tweet").data('twitter-id');
    this.twitterRetweets = this.$(".footer-tweet").data('twitter-retweets');
    if (this.$(".footer-instagram").length && this.instagramToken.length) {
      this.count = this.$(".footer-instagram").data('instagram-count') * 1;
      this.fetchInstagramPhotos();
    }
    if (this.$(".twitter-enabled").length) {
      return this.fetchTweets(this.twitterId, this.twitterRetweets);
    }
  };

  FooterView.prototype.fetchInstagramPhotos = function() {
    var url;
    url = "https://api.instagram.com/v1/users/self/media/recent?access_token=" + this.instagramToken + "&count=" + this.count + "&callback=?";
    return $.ajax(url, {
      type: "GET",
      dataType: "jsonp",
      timeout: 10000,
      error: (function(_this) {
        return function(jqXHR, textStatus) {
          _this.$(".footer-instagram").hide();
          console.log("Instagram Error: " + textStatus);
          if (textStatus === "timeout") {
            return console.log("A timeout error means that either the API is down or the merchant provided an incorrect User ID causing a 404.");
          }
        };
      })(this),
      success: (function(_this) {
        return function(query) {
          var i, j, len, photo, ref1, results, sizes;
          if (_this.count === 3) {
            i = 2;
          } else {
            i = 5;
          }
          if (query.meta.code === 200) {
            ref1 = query.data.slice(0, +i + 1 || 9e9);
            results = [];
            for (j = 0, len = ref1.length; j < len; j++) {
              photo = ref1[j];
              sizes = instagramSquared(photo);
              results.push(_this.$(".footer-instagram-photos").append("<a class='footer-instagram-photo' href='" + photo.link + "' target='_blank'><img alt='' src='" + sizes.large + "'></a>"));
            }
            return results;
          } else {
            _this.$(".footer-instagram").hide();
            return console.log("Instagram Error: " + query.meta.error_message);
          }
        };
      })(this)
    });
  };

  FooterView.prototype.fetchTweets = function() {
    var config;
    config = {
      "profile": {
        "screenName": this.twitterId
      },
      "maxTweets": 1,
      "enableLinks": true,
      "showUser": true,
      "showTime": true,
      "showRetweet": this.twitterRetweets,
      "customCallback": this.renderTweets,
      "showInteraction": false
    };
    return twitterFetcher.fetch(config);
  };

  FooterView.prototype.renderTweets = function(tweets) {
    if (tweets.length) {
      return this.$(".footer-tweet").append("<span class='tweet-wrap'>" + tweets[0] + "</span>");
    } else {
      return console.log("No tweets to display. Most probably cause is an incorrectly entered Widget ID.");
    }
  };

  return FooterView;

})(Backbone.View);

window.AccountView = (function(superClass) {
  extend(AccountView, superClass);

  function AccountView() {
    return AccountView.__super__.constructor.apply(this, arguments);
  }

  AccountView.prototype.events = {
    "click .delete-address": "deleteAddress",
    "click .edit-address": "editAddress",
    "click .cancel-edit": "cancelEditing",
    "click .toggle-new-address": "toggleNewAddress",
    "click .toggle-forgetfulness span": "recoverPassword"
  };

  AccountView.prototype.initialize = function() {
    if ($(document.body).hasClass("template-customers-addresses")) {
      this.prepareAddresses();
    }
    if ($(document.body).hasClass("template-customers-login")) {
      this.checkForReset();
    }
    if (window.location.hash === "#recover") {
      return this.recoverPassword();
    }
  };

  AccountView.prototype.recoverPassword = function() {
    this.$(".recover-password").toggle();
    return this.$(".customer-login").toggle();
  };

  AccountView.prototype.checkForReset = function() {
    if ($(".reset-check").data("successful-reset") === true) {
      return $(".successful-reset").show();
    }
  };

  AccountView.prototype.prepareAddresses = function() {
    var address, addressID, addresses, j, len, results;
    new Shopify.CountryProvinceSelector("address-country", "address-province", {
      hideElement: "address-province-container"
    });
    addresses = this.$(".customer-address");
    if (addresses.length) {
      results = [];
      for (j = 0, len = addresses.length; j < len; j++) {
        address = addresses[j];
        addressID = $(address).data("address-id");
        results.push(new Shopify.CountryProvinceSelector("address-country-" + addressID, "address-province-" + addressID, {
          hideElement: "address-province-container-" + addressID
        }));
      }
      return results;
    }
  };

  AccountView.prototype.deleteAddress = function(e) {
    var addressID;
    addressID = $(e.target).parents("[data-address-id]").data("address-id");
    return Shopify.CustomerAddress.destroy(addressID);
  };

  AccountView.prototype.editAddress = function(e) {
    var addressID, modalContent;
    addressID = $(e.target).parents("[data-address-id]").data("address-id");
    modalContent = new ModalContent({
      title: false,
      message: false
    });
    return new ModalView({
      model: modalContent,
      el: this.$(".modal-wrapper[data-address-id='" + addressID + "']")
    });
  };

  AccountView.prototype.cancelEditing = function(e) {
    var addressID;
    addressID = $(e.target).parents("[data-address-id]").data("address-id");
    $(".customer-address[data-address-id='" + addressID + "']").removeClass("editing");
    return $(".customer-address-edit-form[data-address-id='" + addressID + "']").removeClass("show");
  };

  AccountView.prototype.toggleNewAddress = function() {
    this.$(".add-new-address").toggle();
    return this.$(".customer-new-address").toggleClass("show");
  };

  return AccountView;

})(Backbone.View);

window.CartView = (function(superClass) {
  extend(CartView, superClass);

  function CartView() {
    this.updateShippingLabel = bind(this.updateShippingLabel, this);
    return CartView.__super__.constructor.apply(this, arguments);
  }

  CartView.prototype.events = {
    "change .cart-item-quantity-display": "updateQuantity",
    "click .cart-item-decrease": "updateQuantity",
    "click .cart-item-increase": "updateQuantity",
    "click .remove span": "removeProduct",
    "click .cart-undo": "undoRemoval",
    "change .cart-instructions textarea": "saveSpecialInstructions",
    "click .cart-item-upload": "showFile",
    "click .get-rates": "onGetRates"
  };

  CartView.prototype.initialize = function(options) {
    this.sectionBinding();
    return this.render();
  };

  CartView.prototype.render = function() {
    this.section = window.sectionJSON;
    this.$shippingStrings = this.$('[data-shipping-calculator-strings]');
    this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
    this.savedProducts = [];
    if (this.$shippingStrings.length) {
      this.shippingCalculator();
      if (Shop.customerLoggedIn && Shop.customerAddress && Shop.customerAddress.country.length && Shop.customerAddress.zip.length) {
        this.calculateShipping(true);
      }
      return Shopify.onError = (function(_this) {
        return function(XMLHttpRequest) {
          return _this.handleErrors(XMLHttpRequest);
        };
      })(this);
    }
  };

  CartView.prototype.sectionBinding = function() {
    this.$el.on('shopify:section:load', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-cart')) {
          return;
        }
        _this.delegateEvents();
        return _this.render();
      };
    })(this));
    return this.$el.on('shopify:section:unload', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-cart')) {
          return;
        }
        return _this.undelegateEvents();
      };
    })(this));
  };

  CartView.prototype.saveSpecialInstructions = function() {
    var newNote;
    newNote = $(".cart-instructions textarea").val();
    return Shopify.updateCartNote(newNote, function(cart) {});
  };

  CartView.prototype.updateQuantity = function(e) {
    var inventory, modalContent, newQuantity, oldQuantity, productPrice, productQuantity, productRow, variant;
    productRow = $(e.target).parents("tr");
    productQuantity = productRow.find(".cart-item-quantity-display");
    oldQuantity = parseInt(productQuantity.val());
    oldQuantity = isNaN(oldQuantity) ? 1 : oldQuantity;
    if (Pacific.settings["enable_currency_switcher"]) {
      if ($(e.target).hasClass("cart-item-increase")) {
        newQuantity = oldQuantity + 1;
        productQuantity.val(newQuantity);
      } else if ($(e.target).hasClass("cart-item-decrease")) {
        newQuantity = oldQuantity - 1;
        if (newQuantity < 0) {
          newQuantity = 0;
        }
        productQuantity.val(newQuantity);
      }
      return;
    }
    productPrice = productRow.find(".cart-item-total .money");
    variant = productRow.data("variant");
    inventory = parseInt(productRow.find(".cart-item-quantity").data("max"), 10);
    if ($(e.target).hasClass(".cart-item-quantity-display")) {
      newQuantity = productQuantity;
    } else if ($(e.target).hasClass("cart-item-increase")) {
      newQuantity = oldQuantity + 1;
    } else {
      newQuantity = oldQuantity - 1;
    }
    if (newQuantity === 0) {
      this.removeProduct(null, variant);
      return;
    }
    if (newQuantity > inventory) {
      modalContent = new ModalContent({
        title: "Not Available",
        message: "<p>Sorry, we only have " + inventory + " in stock.</p>",
        button: "Okay"
      });
      new ModalView({
        model: modalContent,
        el: this.$(".modal-wrapper")
      });
    }
    return Shopify.changeItem(variant, newQuantity, (function(_this) {
      return function(cart) {
        var item, j, len, newProductPrice, ref1;
        ref1 = cart.items;
        for (j = 0, len = ref1.length; j < len; j++) {
          item = ref1[j];
          if (item.id === variant) {
            newProductPrice = Shopify.formatMoney(item.line_price, Shop.moneyFormat);
            productPrice.html(newProductPrice);
            productRow.find(".cart-item-quantity-display").val(item.quantity);
          }
        }
        return _this.updateCart(cart);
      };
    })(this));
  };

  CartView.prototype.removeProduct = function(e, variant) {
    var itemRow, itemRowContents, productTitle, productURL, showUndo;
    if (variant) {
      itemRow = $(".variant-" + variant);
    } else {
      variant = $(e.target).parents("tr").data("variant");
      itemRow = $(e.target).parents("tr");
    }
    itemRowContents = itemRow.find("td");
    productTitle = itemRow.data("title");
    productURL = itemRow.data("url");
    this.savedProducts[variant] = {
      "id": variant,
      "content": itemRowContents,
      "quantity": itemRow.find("td.quantity input").val()
    };
    showUndo = (function(_this) {
      return function() {
        var itemRemovedText;
        itemRemovedText = "{{ 'cart.item_removed_message' | t | escape }}".replace("{% raw %}{{ item_title }}{% endraw %}", "<a href='" + productURL + "'>" + productTitle + "</a>");
        itemRow.html("<td colspan='5'>" + itemRemovedText + " <span class='cart-undo' data-variant='" + variant + "'>{{ 'cart.undo' | t | escape }}</span>");
        return itemRow.removeClass("removing");
      };
    })(this);
    return Shopify.removeItem(variant, (function(_this) {
      return function(cart) {
        if (Modernizr.csstransitions) {
          itemRow.addClass("removing").one(_this.transitionend, function() {
            return showUndo();
          });
        } else {
          showUndo();
        }
        return _this.updateCart(cart);
      };
    })(this));
  };

  CartView.prototype.undoRemoval = function(e) {
    var savedProduct, variant;
    variant = $(e.target).data("variant");
    savedProduct = this.savedProducts[variant];
    $("tr.variant-" + variant).html(savedProduct.content);
    return Shopify.addItem(variant, savedProduct.quantity, (function(_this) {
      return function() {
        return Shopify.getCart(function(cart) {
          return _this.updateCart(cart);
        });
      };
    })(this));
  };

  CartView.prototype.updateCart = function(cart) {
    var cartCount, cartCountText, newTotal;
    newTotal = Shopify.formatMoney(cart.total_price, Shop.moneyFormat);
    this.$(".cart-checkout .cart-price .money").html(newTotal);
    cartCount = cart.item_count;
    cartCountText = cart.item_count === 1 ? "item" : "items";
    $(".bag-count").text(cartCount);
    return $(".bag-text").text(cartCountText);
  };

  CartView.prototype.showFile = function(e) {
    var file, image, modalContent;
    file = $(e.target).data("file");
    if (file.match(/(jpg|jpeg|png|gif)/)) {
      image = "<img alt='' src='" + file + "'>";
      modalContent = new ModalContent({
        title: $(e.target).prev().text(),
        message: image
      });
      return new ModalView({
        model: modalContent,
        el: this.$(".modal-wrapper")
      });
    }
  };

  CartView.prototype.shippingCalculator = function() {
    var selectableOptions;
    Shopify.Cart.ShippingCalculator.show({
      submitButton: "{{ 'cart.shipping_calculator.submit' | t | escape }}",
      submitButtonDisabled: "{{ 'cart.shipping_calculator.disabled' | t | escape }}",
      customerIsLoggedIn: Shop.customerLoggedIn,
      moneyFormat: Shop.moneyFormat
    });
    selectableOptions = this.$(".cart-shipping-calculator select");
    setTimeout((function(_this) {
      return function() {
        var j, len, results, select;
        results = [];
        for (j = 0, len = selectableOptions.length; j < len; j++) {
          select = selectableOptions[j];
          results.push(_this.updateShippingLabel(select));
        }
        return results;
      };
    })(this), 500);
    return this.$(".cart-shipping-calculator select").change((function(_this) {
      return function(e) {
        var j, len, results, select;
        results = [];
        for (j = 0, len = selectableOptions.length; j < len; j++) {
          select = selectableOptions[j];
          results.push(_this.updateShippingLabel(select));
        }
        return results;
      };
    })(this));
  };

  CartView.prototype.onGetRates = function() {
    return this.calculateShipping();
  };

  CartView.prototype.calculateShipping = function(auto) {
    var shippingAddress;
    this.$(".get-rates").val("{{ 'cart.shipping_calculator.disabled' | t | escape }}");
    if (auto) {
      shippingAddress = Shop.customerAddress;
    } else {
      shippingAddress = {};
      shippingAddress.zip = this.$(".address-zip").val() || "";
      shippingAddress.country = this.$(".address-country").val() || "";
      shippingAddress.province = this.$(".address-province").val() || "";
    }
    return Shopify.getCartShippingRatesForDestination(shippingAddress, function(rates) {
      var address, feedback, firstRate, j, len, price, rate, rateValues, ratesFeedback, response, shippingCalculatorResponse;
      address = shippingAddress.zip + ", " + shippingAddress.province + ", " + shippingAddress.country;
      if (!shippingAddress.province.length) {
        address = shippingAddress.zip + ", " + shippingAddress.country;
      }
      if (!shippingAddress.zip.length) {
        address = shippingAddress.province + ", " + shippingAddress.country;
      }
      if (!(shippingAddress.province.length && shippingAddress.zip.length)) {
        address = shippingAddress.country;
      }
      shippingCalculatorResponse = this.$(".cart-shipping-calculator-response");
      shippingCalculatorResponse.empty().append("<p class='shipping-calculator-response message'/><ul class='shipping-rates'/>");
      ratesFeedback = $(".shipping-calculator-response");
      if (rates.length > 1) {
        firstRate = Shopify.Cart.ShippingCalculator.formatRate(rates[0].price);
        feedback = "{{ 'cart.shipping_calculator.rates_html' | t | escape }}".replace("{% raw %}{{ address }}{% endraw %}", address).replace("{% raw %}{{ number_of_rates }}{% endraw %}", rates.length).replace("{% raw %}{{ rate }}{% endraw %}", "<span class='money'>" + firstRate + "</span>");
        ratesFeedback.html(feedback);
      } else if (rates.length === 1) {
        response = "{{ 'cart.shipping_calculator.rate' | t | escape }}".replace("{% raw %}{{ address }}{% endraw %}", address);
        ratesFeedback.html(response);
      } else {
        ratesFeedback.html("{{ 'cart.shipping_calculator.no_rates' | t | escape }}");
      }
      for (j = 0, len = rates.length; j < len; j++) {
        rate = rates[j];
        price = Shopify.Cart.ShippingCalculator.formatRate(rate.price);
        rateValues = "{{ 'cart.shipping_calculator.rate_values_html' | t | escape }}".replace("{% raw %}{{ rate_title }}{% endraw %}", rate.name).replace("{% raw %}{{ rate }}{% endraw %}", "<span class='money'>" + price + "</span>");
        this.$(".shipping-rates").append("<li>" + rateValues + "</li>");
      }
      return this.$(".get-rates").val("{{ 'cart.shipping_calculator.submit' | t | escape }}");
    });
  };

  CartView.prototype.handleErrors = function(errors) {
    var errorMessage;
    errorMessage = $.parseJSON(errors.responseText);
    errorMessage = "{{ 'cart.shipping_calculator.error' | t | escape }}".replace("{% raw %}{{ error_message }}{% endraw %}", errorMessage.zip);
    this.$(".cart-shipping-calculator-response").html("<p class='error'>" + errorMessage + "</p>");
    return this.$(".get-rates").val("{{ 'cart.shipping_calculator.submit' | t | escape }}");
  };

  CartView.prototype.updateShippingLabel = function(select) {
    var selectedOption;
    if (select) {
      select = $(select);
      selectedOption = select.find("option:selected").val();
      if (!selectedOption || selectedOption === '---') {
        selectedOption = select.data("default");
        select.val(selectedOption);
      }
      select.prev(".selected-text").text(selectedOption);
      return setTimeout((function(_this) {
        return function() {
          if (select.attr("name") === "address[country]") {
            return _this.updateShippingLabel(_this.$("#address_province"));
          }
        };
      })(this), 1500);
    }
  };

  return CartView;

})(Backbone.View);

window.ModalContent = (function(superClass) {
  extend(ModalContent, superClass);

  function ModalContent() {
    return ModalContent.__super__.constructor.apply(this, arguments);
  }

  ModalContent.prototype.defaults = {
    title: "",
    message: "",
    button: false
  };

  return ModalContent;

})(Backbone.Model);

window.ModalView = (function(superClass) {
  extend(ModalView, superClass);

  function ModalView() {
    return ModalView.__super__.constructor.apply(this, arguments);
  }

  ModalView.prototype.events = {
    "click .modal-close": "closeModal"
  };

  ModalView.prototype.initialize = function() {
    this.content = this.model.toJSON();
    this.body = $(document.body);
    this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
    this.enterContent();
    return this.openModal();
  };

  ModalView.prototype.enterContent = function() {
    if (this.content.title) {
      this.$(".modal-title").text(this.content.title);
    }
    if (this.content.message) {
      this.$(".modal-message").html(this.content.message);
    }
    if (this.content.button) {
      return this.$(".modal-message").append("<p><span class='modal-close button'>" + this.content.button + "</span></p>");
    }
  };

  ModalView.prototype.centerModal = function() {
    var modalContentHeight, modalContentWidth;
    modalContentHeight = this.$(".modal-content").outerHeight();
    modalContentWidth = this.$(".modal-content").outerWidth();
    if (modalContentHeight > $(window).height()) {
      this.$(".modal-content").css({
        marginTop: 0,
        marginLeft: -(modalContentWidth / 2)
      });
      return this.body.addClass("modal-overflow");
    } else {
      this.$(".modal-content").css({
        marginTop: -(modalContentHeight / 2),
        marginLeft: -(modalContentWidth / 2)
      });
      return this.body.removeClass("modal-overflow");
    }
  };

  ModalView.prototype.openModal = function() {
    var checkImagesLoaded;
    this.$el.addClass("active");
    setTimeout((function(_this) {
      return function() {
        return _this.$el.addClass("opening");
      };
    })(this), 20);
    checkImagesLoaded = (function(_this) {
      return function() {
        return _this.$el.imagesLoaded(function() {
          _this.centerModal();
          $(window).on("resize", _.debounce(_this.centerModal, 50));
          return _this.$el.addClass("open");
        });
      };
    })(this);
    if (Modernizr.csstransitions) {
      this.$el.one(this.transitionend, (function(_this) {
        return function() {
          return checkImagesLoaded();
        };
      })(this));
    } else {
      checkImagesLoaded();
    }
    return this.body.on("keyup.modal", (function(_this) {
      return function(e) {
        if (e && e.type === "keyup" && e.keyCode === 27) {
          return _this.closeModal();
        }
      };
    })(this));
  };

  ModalView.prototype.closeModal = function() {
    var finishClosing;
    this.body.off("keyup.modal");
    this.$el.removeClass("open");
    this.$(".modal-content").one(this.transitionend, (function(_this) {
      return function(e) {
        return _this.$el.removeClass("opening");
      };
    })(this));
    finishClosing = (function(_this) {
      return function() {
        _this.$(".modal-content").unbind();
        _this.$el.unbind();
        _this.unbind();
        _this.body.removeClass("modal-overflow");
        return _this.$el.removeClass("active");
      };
    })(this);
    if (Modernizr.csstransitions) {
      this.$(".modal-content").one(this.transitionend, (function(_this) {
        return function(e) {
          return _this.$el.removeClass("opening");
        };
      })(this));
      return this.$el.on(this.transitionend, (function(_this) {
        return function(e) {
          if ($(e.target).hasClass("modal-wrapper")) {
            return finishClosing();
          }
        };
      })(this));
    } else {
      this.$el.removeClass("opening");
      return finishClosing();
    }
  };

  return ModalView;

})(Backbone.View);

window.CollectionView = (function(superClass) {
  extend(CollectionView, superClass);

  function CollectionView() {
    return CollectionView.__super__.constructor.apply(this, arguments);
  }

  CollectionView.prototype.events = {
    "change .collection-filter select": "updateFilter",
    "change .collection-sorting select": "sortProducts",
    "click .collection-remove-filter": "resetFilter",
    "click .collection-description-more": "createModal",
    "click .collection-sharing-toggle": "toggleSharing",
    "mouseout .share-buttons": "toggleSharing"
  };

  CollectionView.prototype.initialize = function() {
    this.sectionBinding();
    return this.validate();
  };

  CollectionView.prototype.validate = function() {
    this.section = window.sectionJSON;
    this.tagsWrapper = this.$(".collection-tags-wrapper");
    this.tags = this.tagsWrapper.find(".collection-tags");
    this.tagFilter = this.$(".collection-tags-apply");
    if ($("html").hasClass("lt-ie9") && this.$(".collection-header").length) {
      this.verticallyAlignHeaderText();
    }
    if (this.section.collection_filtering) {
      this.filterProducts();
    }
    if ($(".collection-products").data("layout") === "masonry") {
      return this.masonryLayout();
    }
  };

  CollectionView.prototype.sectionBinding = function() {
    this.$el.on('shopify:section:load', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-collection')) {
          return;
        }
        _this.delegateEvents();
        return _this.validate();
      };
    })(this));
    return this.$el.on('shopify:section:unload', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-collection')) {
          return;
        }
        return _this.undelegateEvents();
      };
    })(this));
  };

  CollectionView.prototype.verticallyAlignHeaderText = function() {
    var headerHeight;
    headerHeight = this.$(".collection-details").height();
    return this.$(".collection-details").css({
      marginTop: -(headerHeight / 2)
    });
  };

  CollectionView.prototype.toggleSharing = function(e) {
    if (e.type === "mouseout") {
      if ($(e.relatedTarget).closest(".share-buttons").length) {
        return;
      }
    }
    return this.$(".collection-sharing").toggleClass("active");
  };

  CollectionView.prototype.sortProducts = function(e) {
    var Sorting, currentSearch, index, j, len, part, search, searchParts;
    Sorting = {};
    Sorting.sort_by = this.$(".collection-sorting select").val();
    if ($(e.target).closest(".collection-sorting").hasClass("vendor-collection")) {
      currentSearch = location.search;
      searchParts = currentSearch.split("&");
      for (index = j = 0, len = searchParts.length; j < len; index = ++j) {
        part = searchParts[index];
        if (part.indexOf("sort_by") !== -1) {
          searchParts.splice(index, 1);
        }
      }
      search = searchParts.join("&");
      return location.search = search + "&" + (jQuery.param(Sorting));
    } else {
      return location.search = jQuery.param(Sorting);
    }
  };

  CollectionView.prototype.masonryLayout = function() {
    var products;
    products = this.$(".collection-products");
    if (this.$(".product-list-item").length) {
      return products.imagesLoaded((function(_this) {
        return function() {
          var masonry;
          products.masonry({
            transitionDuration: 0
          });
          masonry = products.data("masonry");
          masonry.on("layoutComplete", products.addClass("processed"));
          return masonry.off("layoutComplete");
        };
      })(this));
    } else {
      return products.addClass("processed empty-collection");
    }
  };

  CollectionView.prototype.filterProducts = function() {
    var filter, j, len, ref1, results, selectedText;
    this.fallbackURL = this.$(".collection-filtering").data("fallback-url");
    ref1 = this.$(".collection-filter select");
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      filter = ref1[j];
      if ($(filter).val() !== "any") {
        selectedText = $(filter).find("option:selected").text();
        results.push($(filter).prev().find("strong").text(selectedText));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  CollectionView.prototype.updateFilter = function(e) {
    var filter, filterURL, j, len, newTags, ref1, tag, tags;
    newTags = [];
    $(e.target).toggleClass("active");
    ref1 = this.$(".collection-filter select");
    for (j = 0, len = ref1.length; j < len; j++) {
      filter = ref1[j];
      if ($(filter).val() !== "any") {
        tag = $(filter).val();
        newTags.push(tag);
      }
    }
    if (newTags.length) {
      tags = newTags.join("+");
      filterURL = this.fallbackURL + "/" + tags;
      return window.location.href = filterURL;
    } else {
      return this.resetFilter();
    }
  };

  CollectionView.prototype.resetFilter = function() {
    var fallback;
    fallback = "" + this.fallbackURL + location.search;
    return window.location.href = fallback;
  };

  CollectionView.prototype.createModal = function() {
    var modalContent;
    modalContent = new ModalContent({
      "title": collectionJSON.title,
      "message": collectionJSON.body_html
    });
    return new ModalView({
      model: modalContent,
      el: this.$(".modal-wrapper")
    });
  };

  return CollectionView;

})(Backbone.View);

window.VideoView = (function(superClass) {
  extend(VideoView, superClass);

  function VideoView() {
    return VideoView.__super__.constructor.apply(this, arguments);
  }

  VideoView.prototype.events = {
    "click .home-video-play-button": "openVideo",
    "keyup": "closeVideo"
  };

  VideoView.prototype.initialize = function() {
    this.initializedClass = 'video-initialized';
    return this._validate();
  };

  VideoView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  VideoView.prototype._validate = function() {
    if (this.$(".home-video").length) {
      this.videoWrapper = this.$(".home-video-embed-wrapper");
      this.video = this.$(".home-video-embed");
      this.detachedVideo = null;
    }
    if ($("html").hasClass("lt-ie9")) {
      this.centerVideoText();
    }
    return this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
  };

  VideoView.prototype.openVideo = function() {
    this.videoWrapper.addClass("opening");
    if (this.detachedVideo) {
      this.video.width("");
      this.detachedVideo.appendTo(this.video);
    } else {
      this.video.fitVids({
        customSelector: "iframe"
      });
    }
    this.verticallyCenterVideo();
    $(window).on("resize.video", (function(_this) {
      return function() {
        return _this.verticallyCenterVideo();
      };
    })(this));
    this.videoWrapper.on("click.video", (function(_this) {
      return function() {
        return _this.closeVideo();
      };
    })(this));
    return setTimeout((function(_this) {
      return function() {
        return _this.videoWrapper.addClass("open");
      };
    })(this), 20);
  };

  VideoView.prototype.centerVideoText = function() {
    var contentHeight, contentWidth, videoContent;
    videoContent = this.$(".home-video-content");
    contentWidth = videoContent.outerWidth();
    contentHeight = videoContent.outerHeight();
    return videoContent.css({
      marginTop: -(contentHeight / 2),
      marginLeft: -(contentWidth / 2)
    });
  };

  VideoView.prototype.verticallyCenterVideo = function() {
    var availableHeight, video, videoHeight, videoRatio, windowHeight;
    this.video.css({
      marginTop: 0,
      width: "100%"
    });
    video = this.video.find(".fluid-width-video-wrapper");
    videoHeight = video.outerHeight();
    videoRatio = video.width() / videoHeight;
    windowHeight = window.innerHeight || $(window).height();
    availableHeight = windowHeight - 60;
    if (videoHeight > availableHeight) {
      return this.video.removeClass("centered").css({
        marginTop: 0,
        width: availableHeight * videoRatio
      });
    } else {
      return this.video.addClass("centered").css({
        marginTop: -(videoHeight / 2),
        width: "100%"
      });
    }
  };

  VideoView.prototype.closeVideo = function(e) {
    var detach;
    if (!this.$(".home-video").length) {
      return;
    }
    if (e && this.videoWrapper.hasClass("open")) {
      if (e.which !== 27) {
        return;
      }
    }
    $(window).off("resize.video");
    this.videoWrapper.off("click.video");
    this.videoWrapper.removeClass("open");
    detach = (function(_this) {
      return function() {
        _this.detachedVideo = _this.video.find(".fluid-width-video-wrapper").detach();
        return _this.videoWrapper.removeClass("opening").off(_this.transitionend);
      };
    })(this);
    if (Modernizr.csstransitions) {
      this.videoWrapper.on(this.transitionend, (function(_this) {
        return function() {
          return detach();
        };
      })(this));
      return setTimeout((function(_this) {
        return function() {
          if (_this.videoWrapper.hasClass("opening")) {
            return detach();
          }
        };
      })(this), 300);
    } else {
      return detach();
    }
  };

  return VideoView;

})(Backbone.View);

window.FeaturedImagesView = (function(superClass) {
  extend(FeaturedImagesView, superClass);

  function FeaturedImagesView() {
    return FeaturedImagesView.__super__.constructor.apply(this, arguments);
  }

  FeaturedImagesView.prototype.initialize = function() {
    this.initializedClass = 'featured-images-initialized';
    return this._validate();
  };

  FeaturedImagesView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  FeaturedImagesView.prototype._validate = function() {
    var feature, j, len, ref1;
    if ($("html").hasClass("lt-ie9")) {
      ref1 = this.$(".home-feature");
      for (j = 0, len = ref1.length; j < len; j++) {
        feature = ref1[j];
        if ($(feature).find(".home-feature-content").length) {
          this.verticallyAlignContent($(feature).find(".home-feature-content"));
        }
      }
    }
    return this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
  };

  FeaturedImagesView.prototype.verticallyAlignContent = function(content) {
    var contentHeight;
    content = $(content);
    contentHeight = content.outerHeight();
    return content.css({
      marginTop: -(contentHeight / 2)
    });
  };

  return FeaturedImagesView;

})(Backbone.View);

window.FeaturedProductsView = (function(superClass) {
  extend(FeaturedProductsView, superClass);

  function FeaturedProductsView() {
    return FeaturedProductsView.__super__.constructor.apply(this, arguments);
  }

  FeaturedProductsView.prototype.initialize = function() {
    this.initializedClass = 'featured-products-initialized';
    return this._validate();
  };

  FeaturedProductsView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  FeaturedProductsView.prototype._validate = function() {
    return this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
  };

  return FeaturedProductsView;

})(Backbone.View);

window.FeaturedCollectionsView = (function(superClass) {
  extend(FeaturedCollectionsView, superClass);

  function FeaturedCollectionsView() {
    return FeaturedCollectionsView.__super__.constructor.apply(this, arguments);
  }

  FeaturedCollectionsView.prototype.initialize = function() {
    this.initializedClass = 'featured-collections-initialized';
    return this._validate();
  };

  FeaturedCollectionsView.prototype.update = function($el) {
    this.$el = $el;
    return this._validate();
  };

  FeaturedCollectionsView.prototype._validate = function() {
    var collection, j, len, ref1;
    if ($("html").hasClass("lt-ie9")) {
      ref1 = this.$(".home-collection-list-item");
      for (j = 0, len = ref1.length; j < len; j++) {
        collection = ref1[j];
        this.verticallyAlignContent($(collection).find(".home-collection-list-item-content"));
      }
    }
    return this.transitionend = (function(transition) {
      var transEndEventNames;
      transEndEventNames = {
        "-webkit-transition": "webkitTransitionEnd",
        "-moz-transition": "transitionend",
        "-o-transition": "oTransitionEnd",
        transition: "transitionend"
      };
      return transEndEventNames[transition];
    })(Modernizr.prefixed("transition"));
  };

  FeaturedCollectionsView.prototype.verticallyAlignContent = function(content) {
    var contentHeight;
    content = $(content);
    contentHeight = content.outerHeight();
    return content.css({
      marginTop: -(contentHeight / 2)
    });
  };

  return FeaturedCollectionsView;

})(Backbone.View);

window.ListCollectionsView = (function(superClass) {
  extend(ListCollectionsView, superClass);

  function ListCollectionsView() {
    return ListCollectionsView.__super__.constructor.apply(this, arguments);
  }

  ListCollectionsView.prototype.initialize = function() {
    this.sectionBinding();
    return this.validate();
  };

  ListCollectionsView.prototype.validate = function() {
    if ($("html").hasClass("lt-ie9")) {
      return this.verticallyAlignDetails();
    }
  };

  ListCollectionsView.prototype.sectionBinding = function() {
    this.$el.on('shopify:section:load', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-collections-list')) {
          return;
        }
        _this.delegateEvents();
        return _this.validate();
      };
    })(this));
    return this.$el.on('shopify:section:unload', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-collections-list')) {
          return;
        }
        return _this.undelegateEvents();
      };
    })(this));
  };

  ListCollectionsView.prototype.verticallyAlignDetails = function() {
    return this.$(".collections-list").imagesLoaded((function(_this) {
      return function() {
        var collection, collectionDetailsHeight, collectionsDetails, j, len, ref1, results;
        ref1 = _this.$(".collection-item");
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          collection = ref1[j];
          collectionsDetails = $(collection).find(".collection-item-details");
          collectionDetailsHeight = collectionsDetails.height();
          results.push(collectionsDetails.css({
            marginTop: -(collectionDetailsHeight / 2)
          }));
        }
        return results;
      };
    })(this));
  };

  return ListCollectionsView;

})(Backbone.View);

window.PasswordView = (function(superClass) {
  extend(PasswordView, superClass);

  function PasswordView() {
    return PasswordView.__super__.constructor.apply(this, arguments);
  }

  PasswordView.prototype.events = {
    "click .password-entry": "togglePasswordForm"
  };

  PasswordView.prototype.initialize = function() {
    this.toggle = this.$(".password-entry");
    if (this.$("[data-password-form-inner]").hasClass("has-errors")) {
      return this.togglePasswordForm();
    }
  };

  PasswordView.prototype.togglePasswordForm = function() {
    this.$(".password-subscribe-wrapper").add(".password-form-wrapper").toggleClass("visible");
    if (this.$(".password-subscribe-wrapper").hasClass("visible")) {
      return this.toggle.text(this.toggle.data("enter-password"));
    } else {
      return this.toggle.text(this.toggle.data("cancel"));
    }
  };

  return PasswordView;

})(Backbone.View);

window.ImageZoomView = (function(superClass) {
  extend(ImageZoomView, superClass);

  function ImageZoomView() {
    return ImageZoomView.__super__.constructor.apply(this, arguments);
  }

  ImageZoomView.prototype.events = {
    "prepare-zoom": "prepareZoom",
    "click": "toggleZoom",
    "mouseout .product-zoom": "toggleZoom",
    "mousemove .product-zoom": "zoomImage"
  };

  ImageZoomView.prototype.initialize = function() {
    this.zoomArea = this.$(".product-zoom");
    this.$el.imagesLoaded((function(_this) {
      return function() {
        return _this.prepareZoom();
      };
    })(this));
    return $(window).resize((function(_this) {
      return function() {
        return _this.prepareZoom();
      };
    })(this));
  };

  ImageZoomView.prototype.prepareZoom = function() {
    var newImage, photoAreaHeight, photoAreaWidth;
    photoAreaWidth = this.$el.width();
    photoAreaHeight = this.$el.height();
    newImage = new Image();
    $(newImage).on("load", (function(_this) {
      return function() {
        var ratio, ratios;
        _this.zoomImageWidth = newImage.width;
        _this.zoomImageHeight = newImage.height;
        ratios = new Array();
        ratios[0] = _this.zoomImageWidth / photoAreaWidth;
        ratios[1] = _this.zoomImageHeight / photoAreaHeight;
        ratio = Math.max.apply(Math, ratios);
        if (ratio < 1.4) {
          _this.$el.removeClass("zoom-enabled");
        } else {
          _this.$el.addClass("zoom-enabled");
          return _this.zoomArea.css({
            backgroundImage: "url(" + newImage.src + ")"
          });
        }
      };
    })(this));
    return newImage.src = this.$("img").attr("src");
  };

  ImageZoomView.prototype.toggleZoom = function(e) {
    if (this.$el.hasClass("zoom-enabled")) {
      if (e.type === "mouseout") {
        this.zoomArea.removeClass("active");
        return;
      }
      if (this.zoomArea.hasClass("active")) {
        this.zoomArea.removeClass("active");
      } else {
        this.zoomArea.addClass("active");
      }
      return this.zoomImage(e);
    }
  };

  ImageZoomView.prototype.zoomImage = function(e) {
    var bigImageOffset, bigImageX, bigImageY, mousePositionX, mousePositionY, newBackgroundPosition, ratioX, ratioY, zoomHeight, zoomWidth;
    zoomWidth = this.zoomArea.width();
    zoomHeight = this.zoomArea.height();
    bigImageOffset = this.$el.offset();
    bigImageX = Math.round(bigImageOffset.left);
    bigImageY = Math.round(bigImageOffset.top);
    mousePositionX = e.pageX - bigImageX;
    mousePositionY = e.pageY - bigImageY;
    if (mousePositionX < zoomWidth && mousePositionY < zoomHeight && mousePositionX > 0 && mousePositionY > 0) {
      if (this.zoomArea.hasClass("active")) {
        ratioX = Math.round(mousePositionX / zoomWidth * this.zoomImageWidth - zoomWidth / 2) * -1;
        ratioY = Math.round(mousePositionY / zoomHeight * this.zoomImageHeight - zoomHeight / 2) * -1;
        if (ratioX > 0) {
          ratioX = 0;
        }
        if (ratioY > 0) {
          ratioY = 0;
        }
        if (ratioX < -(this.zoomImageWidth - zoomWidth)) {
          ratioX = -(this.zoomImageWidth - zoomWidth);
        }
        if (ratioY < -(this.zoomImageHeight - zoomHeight)) {
          ratioY = -(this.zoomImageHeight - zoomHeight);
        }
        newBackgroundPosition = ratioX + "px " + ratioY + "px";
        return this.zoomArea.css({
          backgroundPosition: newBackgroundPosition
        });
      }
    }
  };

  return ImageZoomView;

})(Backbone.View);

window.ProductView = (function(superClass) {
  extend(ProductView, superClass);

  function ProductView() {
    return ProductView.__super__.constructor.apply(this, arguments);
  }

  ProductView.prototype.events = {
    "change .product-options select": "updateVariantLabel",
    "click .product-thumbnails img": "swapImage",
    "submit .product-form": "addToCart"
  };

  ProductView.prototype.initialize = function(options) {
    this.sectionBinding();
    return this.validate();
  };

  ProductView.prototype.validate = function() {
    var $productJSON, $productSettings;
    this.settings = window.settingsJSON;
    this.product = window.productJSON;
    this.section = window.sectionJSON;
    this.zoomEnabled = this.section.enable_zoom;
    this.addToCartAjax = this.section.enable_send_to_cart;
    this.variants = this.product.variants;
    this.images = this.product.images;
    this.minimumPriceArea = this.$(".product-price-minimum");
    this.addingToCart = false;
    this.productArea = $(".product-wrap", this.$el);
    this.$productForm = $(".product-form", this.productArea);
    this.formID = parseInt(this.$productForm.attr("data-product-form"), 10);
    this.productSelect = "#product-select-" + this.formID;
    this.$priceArea = $(".product-form .product-price", this.productArea);
    this.$addToCartButton = $(".submit-wrapper input", this.productArea);
    this.$productThumbnails = $(".product-images .product-thumbnails img", this.productArea);
    $productJSON = $("[data-product-json-" + this.formID + "]", this.productArea);
    $productSettings = $("[data-product-settings-" + this.formID + "]", this.productArea);
    this.productJSON = JSON.parse($productJSON.text());
    this.productSettings = JSON.parse($productSettings.text());
    this.$variantDropdowns = $("[data-option-select=" + this.formID + "]", this.productArea);
    this.options = this.productJSON.options;
    this.variants = this.productJSON.variants;
    if (this.$(".product-form").length) {
      this.setupVariants();
    }
    if (this.zoomEnabled && this.$(".product-images").length) {
      this.zoomView = new ImageZoomView({
        el: $(".product-main-image", this.$el)
      });
    }
    return Shopify.onError = (function(_this) {
      return function(XMLHttpRequest) {
        return _this.handleErrors(XMLHttpRequest);
      };
    })(this);
  };

  ProductView.prototype.sectionBinding = function() {
    this.$el.on('shopify:section:load', (function(_this) {
      return function(event) {
        if (!$(event.target).hasClass('section-product')) {
          return;
        }
        _this.delegateEvents();
        return _this.validate();
      };
    })(this));
    return this.$el.on('shopify:section:unload', (function(_this) {
      return function(event) {
        var ref1;
        if (!$(event.target).hasClass('section-product')) {
          return;
        }
        _this.undelegateEvents();
        return (ref1 = _this.zoomView) != null ? ref1.remove() : void 0;
      };
    })(this));
  };

  ProductView.prototype.swapImage = function(e, newImage) {
    var mainImage;
    newImage = e ? $(e.target).data("high-res") : newImage;
    mainImage = this.$(".product-main-image img")[0];
    mainImage.src = newImage;
    if (this.zoomEnabled) {
      return this.$(".product-main-image").trigger("prepare-zoom");
    }
  };

  ProductView.prototype.setupVariants = function() {
    var dropdownSettings, variantHelperDefaults;
    variantHelperDefaults = {
      $addToCartButton: this.$addToCartButton,
      $priceFields: this.$priceArea,
      $productForm: this.$productForm,
      $productThumbnails: this.$productThumbnails,
      formID: this.formID,
      productSettings: this.productSettings,
      productJSON: this.productJSON
    };
    if (this.$variantDropdowns.length) {
      dropdownSettings = {
        $selector: this.$variantDropdowns,
        type: 'select'
      };
      dropdownSettings = window.ThemeUtils.extend(variantHelperDefaults, dropdownSettings);
      return this.variantHelpers = new VariantHelper(dropdownSettings);
    }
  };

  ProductView.prototype.updateVariantLabel = function(e, select) {
    var selectedVariant;
    select = e ? e.target : select;
    select = $(select);
    selectedVariant = select.find("option:selected").val();
    return select.prev(".select-text").html(selectedVariant);
  };

  ProductView.prototype.addToCart = function(e) {
    e.preventDefault();
    this.$(".error-message").remove();
    return Shopify.addItemFromForm("product-form", (function(_this) {
      return function(data) {
        var message;
        if (!_this.addToCartAjax) {
          _this.$(".cart-count").addClass("active-cart");
          message = "{{ 'products.product.success_html' | t | escape }}".replace("{% raw %}{{ product }}{% endraw %}", "" + _this.product.title).replace("{% raw %}{{ cart_link }}{% endraw %}", "<a href='/cart'>{{ 'products.product.cart_link' | t }}</a>").replace("{% raw %}{{ continue_link }}{% endraw %}", "<a href='/collections/all'>{{ 'products.product.continue_link' | t }}</a>").replace("{% raw %}{{ checkout_link }}{% endraw %}", "<a href='/checkout'>{{ 'products.product.checkout_link' | t }}</a>");
          return setTimeout(function() {
            _this.$el.find(".product-message").html(message).addClass("success-message").removeClass("error-message");
            return _this.updateCart(data);
          }, 500);
        } else {
          return window.location.href = "/cart";
        }
      };
    })(this));
  };

  ProductView.prototype.updateCart = function(newItem) {
    return Shopify.getCart((function(_this) {
      return function(cart) {
        var cartCount, cartCountText, ref;
        cartCount = cart.item_count;
        cartCountText = cart.item_count === 1 ? "item" : "items";
        $(".bag-count").text(cart.item_count);
        $(".bag-text").html(cartCountText);
        ref = cart.items;
      };
    })(this));
  };

  ProductView.prototype.handleErrors = function(error) {
    var max, message, target, variant, variantID;
    if (error.responseJSON.message === "Cart Error") {
      variantID = parseInt(this.$("#product-variants").val(), 10);
      target = (function() {
        var j, len, ref1, results;
        ref1 = this.product.variants;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          variant = ref1[j];
          if (variant.id === variantID) {
            results.push(variant);
          }
        }
        return results;
      }).call(this);
      max = target[0].inventory_quantity;
      message = "{{ 'products.product.error_message_stock' | t | escape }}".replace("{% raw %}{{ stock }}{% endraw %}", max);
    } else {
      message = "{{ 'products.product.error_message_general' | t | escape }}".replace("{% raw %}{{ stock }}{% endraw %}", max);
    }
    return this.$(".product-form").append("<div class=\"error-message\">" + message + "</div>");
  };

  return ProductView;

})(Backbone.View);

window.RTEView = (function(superClass) {
  extend(RTEView, superClass);

  function RTEView() {
    return RTEView.__super__.constructor.apply(this, arguments);
  }

  RTEView.prototype.events = {
    "change .select-wrapper select": "updateOption"
  };

  RTEView.prototype.initialize = function() {
    var j, len, results, select, selects;
    this.setupTabs();
    this.$el.fitVids({
      customSelector: "iframe",
      ignore: "[data-shop='embeds.myshopify.com']"
    });
    selects = this.$("select");
    results = [];
    for (j = 0, len = selects.length; j < len; j++) {
      select = selects[j];
      if (!$(select).parent(".select-wrapper").length) {
        $(select).wrap('<div class="select-wrapper" />').parent().prepend("<span class='selected-text'></span>");
      }
      results.push(this.updateOption(null, select));
    }
    return results;
  };

  RTEView.prototype.setupTabs = function() {
    var groupedContent;
    return groupedContent = new GroupedContent(this.$el.get(0), {
      layout: 'tabs',
      intelliparse: false
    });
  };

  RTEView.prototype.updateOption = function(e, selector) {
    var newOption, select;
    select = e ? $(e.target) : $(selector);
    newOption = select.find("option:selected").text();
    return select.siblings(".selected-text").text(newOption);
  };

  return RTEView;

})(Backbone.View);

window.GiftCardView = (function(superClass) {
  extend(GiftCardView, superClass);

  function GiftCardView() {
    return GiftCardView.__super__.constructor.apply(this, arguments);
  }

  GiftCardView.prototype.initialize = function() {
    return this.addQrCode();
  };

  GiftCardView.prototype.addQrCode = function() {
    var qrWrapper;
    qrWrapper = $('[data-qr-code]');
    return new QRCode(qrWrapper[0], {
      text: qrWrapper.data('qr-code'),
      width: 120,
      height: 120
    });
  };

  return GiftCardView;

})(Backbone.View);

window.ThemeEditor = (function(superClass) {
  extend(ThemeEditor, superClass);

  function ThemeEditor() {
    return ThemeEditor.__super__.constructor.apply(this, arguments);
  }

  ThemeEditor.prototype.initialize = function() {
    this.instanceHandlers = {};
    this.instances = {};
    return $(document).on('shopify:section:load', (function(_this) {
      return function(event) {
        return _this._onSectionLoad(event);
      };
    })(this)).on('shopify:section:unload', (function(_this) {
      return function(event) {
        return _this._onSectionUnload(event);
      };
    })(this)).on('shopify:section:select', (function(_this) {
      return function(event) {
        return _this._onSectionSelect(event);
      };
    })(this)).on('shopify:section:deselect', (function(_this) {
      return function(event) {
        return _this._onSectionDeselect(event);
      };
    })(this)).on('shopify:block:select', (function(_this) {
      return function(event) {
        return _this._onBlockSelect(event);
      };
    })(this)).on('shopify:block:deselect', (function(_this) {
      return function(event) {
        return _this._onBlockDeselect(event);
      };
    })(this));
  };

  ThemeEditor.prototype._findInstance = function(event) {
    var $container, instance;
    instance = this.instances[event.originalEvent.detail.sectionId];
    if (instance != null) {
      return instance;
    } else {
      $container = $('[data-section-id]', event.target);
      return this._createInstance($container);
    }
  };

  ThemeEditor.prototype._createInstance = function($container, instanceHandler) {
    var instance, sectionId, sectionType;
    sectionType = $container.attr('data-section-type');
    sectionId = $container.attr('data-section-id');
    if (sectionType == null) {
      return;
    }
    instanceHandler = instanceHandler || this.instanceHandlers[sectionType];
    instance = {
      instanceHandler: instanceHandler,
      $container: $container,
      sectionId: sectionId
    };
    this.instances[sectionId] = instance;
    return instance;
  };


  /*
      Action: A section has been added or re-rendered.
      Expected: Re-execute any JavaScript needed for the section to work and
          display properly (as if the page had just been loaded).
   */

  ThemeEditor.prototype._onSectionLoad = function(event) {
    var $container, ref1, ref2;
    $container = $('[data-section-id]', event.target);
    if (!$container.length) {
      return;
    }
    return (ref1 = this._createInstance($container)) != null ? (ref2 = ref1.instanceHandler) != null ? typeof ref2.onSectionLoad === "function" ? ref2.onSectionLoad(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: A section has been deleted or is being re-rendered.
      Expected: Clean up any event listeners, variables, etc., so that
          nothing breaks when the page is interacted with and no memory leaks occur.
   */

  ThemeEditor.prototype._onSectionUnload = function(event) {
    var instance, ref1;
    instance = this._findInstance(event);
    if (instance != null) {
      if ((ref1 = instance.instanceHandler) != null) {
        if (typeof ref1.onSectionUnload === "function") {
          ref1.onSectionUnload(event);
        }
      }
    }
    if (instance) {
      return delete this.instances[instance.sectionId];
    }
  };


  /*
      Action: User has selected the section in the sidebar.
      Expected: Make sure the section is in view and stays
          in view while selected (scrolling happens automatically).
      Example: Could be used to pause a slideshow
   */

  ThemeEditor.prototype._onSectionSelect = function(event) {
    var ref1, ref2;
    return (ref1 = this._findInstance(event)) != null ? (ref2 = ref1.instanceHandler) != null ? typeof ref2.onSectionSelect === "function" ? ref2.onSectionSelect(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User has deselected the section in the sidebar.
      Expected: (None)
      Example: Could be used to restart slideshows that are no longer being interacted with.
   */

  ThemeEditor.prototype._onSectionDeselect = function(event) {
    var ref1, ref2;
    return (ref1 = this._findInstance(event)) != null ? (ref2 = ref1.instanceHandler) != null ? typeof ref2.onSectionDeselect === "function" ? ref2.onSectionDeselect(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User has selected the block in the sidebar.
      Expected: Make sure the block is in view and stays
          in view while selected (scrolling happens automatically).
      Example: Can be used to to trigger a slideshow to bring a slide/block into view
   */

  ThemeEditor.prototype._onBlockSelect = function(event) {
    var ref1, ref2;
    return (ref1 = this._findInstance(event)) != null ? (ref2 = ref1.instanceHandler) != null ? typeof ref2.onBlockSelect === "function" ? ref2.onBlockSelect(event) : void 0 : void 0 : void 0;
  };


  /*
      Action: User has deselected the block in the sidebar.
      Expected: (None)
      Example: Resume a slideshow
   */

  ThemeEditor.prototype._onBlockDeselect = function(event) {
    var ref1, ref2;
    return (ref1 = this._findInstance(event)) != null ? (ref2 = ref1.instanceHandler) != null ? typeof ref2.onBlockDeselect === "function" ? ref2.onBlockDeselect(event) : void 0 : void 0 : void 0;
  };


  /*
      Auto initialisation of a section for the store front
   */

  ThemeEditor.prototype._sectionInit = function(instance) {
    var ref1;
    return instance != null ? (ref1 = instance.instanceHandler) != null ? typeof ref1.init === "function" ? ref1.init(instance) : void 0 : void 0 : void 0;
  };


  /*
      Registration of a section
          - Takes a string parameter as the first argument which
            matches to `[data-section-type]`
  
       * Example
          @sections = new Sections()
          @sections.register('some-section-type', @someSectionClass)
   */

  ThemeEditor.prototype.register = function(type, instanceHandler) {

    /*
        Storage of a instanceHandler based on the sectionType allows _onSectionLoad
           to connect a new section to it's registered instanceHandler
     */
    this.instanceHandlers[type] = instanceHandler;
    return $("[data-section-type=" + type + "]").each((function(_this) {
      return function(index, container) {
        var $container;
        $container = $(container);
        return _this._sectionInit(_this._createInstance($container, instanceHandler));
      };
    })(this));
  };


  /*
      Public method to retrieve information on an instance based on the
      bubbled `event`
   */

  ThemeEditor.prototype.getInstance = function(event) {
    return this._findInstance(event);
  };

  return ThemeEditor;

})(Backbone.View);

window.ThemeUtils = {
  extend: function() {
    var dest, j, k, len, obj, objs, v;
    dest = arguments[0], objs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (j = 0, len = objs.length; j < len; j++) {
      obj = objs[j];
      for (k in obj) {
        v = obj[k];
        dest[k] = v;
      }
    }
    return dest;
  },
  windowWidth: function() {
    return window.innerWidth || this.window.width();
  },
  debounce: function(func, wait, immediate) {
    var timeout;
    timeout = null;
    return function() {
      var args, callNow, context, later;
      context = this;
      args = arguments;
      later = function() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    };
  },
  inViewport: function(el) {
    var bounds, rect;
    if (typeof jQuery === "function" && el instanceof jQuery) {
      el = el[0];
    }
    rect = el.getBoundingClientRect();
    bounds = {
      top: rect.top >= 0,
      bottom: rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
    };
    return bounds.top && bounds.bottom;
  },
  unique: function(array) {
    var j, key, output, ref1, results, value;
    output = {};
    for (key = j = 0, ref1 = array.length; 0 <= ref1 ? j < ref1 : j > ref1; key = 0 <= ref1 ? ++j : --j) {
      output[array[key]] = array[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  }
};

window.LinkedOptions = (function() {
  function LinkedOptions(options) {
    this.options = options;
    this._init();
  }

  LinkedOptions.prototype._init = function() {
    return this._mapVariants(this.options.productJSON);
  };

  LinkedOptions.prototype._getCurrent = function(optionIndex) {
    var key, option1, option2, selector;
    if (this.options.type === 'select') {
      switch (optionIndex) {
        case 0:
          key = 'root';
          selector = this.options.$selector.eq(0);
          break;
        case 1:
          key = this.options.$selector.eq(0).val();
          selector = this.options.$selector.eq(1);
          break;
        case 2:
          key = (this.options.$selector.eq(0).val()) + " / " + (this.options.$selector.eq(1).val());
          selector = this.options.$selector.eq(2);
      }
    }
    if (this.options.type === 'radio') {
      switch (optionIndex) {
        case 0:
          key = 'root';
          selector = this.options.$selector.filter('[data-option-index=0]').filter(':checked');
          break;
        case 1:
          key = this.options.$selector.filter('[data-option-index=0]').filter(':checked').val();
          selector = this.options.$selector.filter('[data-option-index=1]').filter(':checked');
          break;
        case 2:
          option1 = this.options.$selector.filter('[data-option-index=0]').filter(':checked').val();
          option2 = this.options.$selector.filter('[data-option-index=1]').filter(':checked').val();
          key = option1 + " / " + option2;
          selector = this.options.$selector.filter('[data-option-index=2]').filter(':checked');
      }
    }
    return {
      key: key,
      selector: selector
    };
  };

  LinkedOptions.prototype._updateOptions = function(optionIndex, optionsMap) {
    var $nextOption, $option, $selector, $selectorOptions, availableOptions, initialValue, j, key, l, len, len1, nextSelector, option, ref1, selector, updateSelected;
    nextSelector = optionIndex + 1;
    updateSelected = false;
    ref1 = this._getCurrent(optionIndex), key = ref1.key, selector = ref1.selector;
    availableOptions = optionsMap[key] || [];
    if (this.options.type === 'select') {
      $selector = this.options.$productForm.find(selector);
      initialValue = $selector.val();
      $selectorOptions = $selector.find('option');
      for (j = 0, len = $selectorOptions.length; j < len; j++) {
        option = $selectorOptions[j];
        $option = $(option);
        if (availableOptions.indexOf(option.value) === -1) {
          if (option.selected) {
            updateSelected = true;
          }
          $option.prop('disabled', true).prop('selected', false);
        } else {
          $option.prop('disabled', false);
        }
      }
      if (availableOptions.indexOf(initialValue) !== -1) {
        $selector.val(initialValue);
      }
      if (updateSelected) {
        $selectorOptions.filter(':not(:disabled)').eq(0).prop('selected', true);
      }
    }
    if (this.options.type === 'radio') {
      $selector = this.options.$selector.filter("[data-option-index=" + optionIndex + "]");
      for (l = 0, len1 = $selector.length; l < len1; l++) {
        option = $selector[l];
        $option = $(option);
        if (availableOptions.indexOf(option.value) === -1) {
          if (option.checked) {
            updateSelected = true;
          }
          $option.prop('disabled', true).prop('checked', false);
        } else {
          $option.prop('disabled', false);
        }
      }
      if (updateSelected) {
        $selector.filter(':not(:disabled)').eq(0).attr('checked', true).trigger('click');
      }
    }
    $selector.trigger('change');
    $nextOption = this.options.$selector.filter("[data-option-index=" + nextSelector + "]");
    if ($nextOption.length !== 0) {
      return this._updateOptions(nextSelector, optionsMap);
    }
  };

  LinkedOptions.prototype._mapVariants = function(product) {
    var j, key, len, optionsMap, ref1, variant;
    optionsMap = [];
    optionsMap['root'] = [];
    ref1 = product.variants;
    for (j = 0, len = ref1.length; j < len; j++) {
      variant = ref1[j];
      if (variant.available) {
        optionsMap['root'].push(variant.option1);
        optionsMap['root'] = window.ThemeUtils.unique(optionsMap['root']);
        if (product.options.length > 1) {
          key = variant.option1;
          optionsMap[key] = optionsMap[key] || [];
          optionsMap[key].push(variant.option2);
          optionsMap[key] = window.ThemeUtils.unique(optionsMap[key]);
        }
        if (product.options.length > 2) {
          key = variant.option1 + " / " + variant.option2;
          optionsMap[key] = optionsMap[key] || [];
          optionsMap[key].push(variant.option3);
          optionsMap[key] = window.ThemeUtils.unique(optionsMap[key]);
        }
      }
    }
    this._updateOptions(0, optionsMap);
    return this.options.$selector.on('change', (function(_this) {
      return function(event) {
        var index, nextSelector;
        index = parseInt($(event.currentTarget).attr('data-option-index'), 10);
        nextSelector = index + 1;
        return _this._updateOptions(nextSelector, optionsMap);
      };
    })(this));
  };

  return LinkedOptions;

})();

window.VariantHelper = (function() {
  function VariantHelper(options) {
    var defaultOptions, isShopify;
    defaultOptions = {
      $addToCartButton: null,
      $priceFields: null,
      $productForm: null,
      $productThumbnails: null,
      $selector: null,
      type: 'select',
      productJSON: null,
      productSettings: null
    };
    this.options = window.ThemeUtils.extend(defaultOptions, options);
    this.$body = $(document.body);
    this.linkedOptions = null;
    this.enableHistory = false;
    this.$masterSelect = this.options.$productForm.find("#product-select-" + this.options.formID);
    isShopify = window.Shopify && window.Shopify.preview_host;
    if (window.history && window.history.replaceState && this.options.productSettings.enableHistory && !isShopify) {
      this.enableHistory = true;
    }
    this._init();
    this._bindEvents();
  }

  VariantHelper.prototype._init = function() {
    var j, len, ref1, select;
    if (this.options.type === 'select') {
      ref1 = this.options.$selector;
      for (j = 0, len = ref1.length; j < len; j++) {
        select = ref1[j];
        this._setSelectLabel(null, $(select));
      }
    }
    if (this.options.productSettings.linkedOptions) {
      return this.linkedOptions = new LinkedOptions(this.options);
    }
  };

  VariantHelper.prototype._bindEvents = function() {
    return this.options.$selector.on('change', (function(_this) {
      return function(event) {
        return _this._variantChange(event);
      };
    })(this));
  };

  VariantHelper.prototype._setSelectLabel = function(event, $target) {
    var selectedOption;
    if (event == null) {
      event = null;
    }
    if ($target == null) {
      $target = false;
    }
    if (!$target) {
      $target = $(event.currentTarget);
    }
    selectedOption = $target.find('option:selected').val();
    return $target.prev('[data-select-text]').find('[data-selected-option]').text(selectedOption);
  };

  VariantHelper.prototype._getCurrentOptions = function() {
    var $inputs, productOptions;
    productOptions = [];
    $inputs = this.options.$selector;
    if (this.options.type === 'radio') {
      $inputs = $inputs.filter(':checked');
    }
    $inputs.each(function(index, element) {
      return productOptions.push($(element).val());
    });
    return productOptions;
  };

  VariantHelper.prototype._getVariantFromOptions = function(productOptions) {
    var foundVariant, isMatch, j, len, ref1, variant;
    if (this.options.productJSON.variants == null) {
      return;
    }
    foundVariant = null;
    ref1 = this.options.productJSON.variants;
    for (j = 0, len = ref1.length; j < len; j++) {
      variant = ref1[j];
      isMatch = productOptions.every(function(value, index) {
        return variant.options[index] === value;
      });
      if (isMatch) {
        foundVariant = variant;
      }
    }
    return foundVariant;
  };

  VariantHelper.prototype._updateMasterSelect = function(variant) {
    var ref1;
    if (variant == null) {
      return;
    }
    if ((ref1 = this.$masterSelect.find("[data-variant-id=" + variant.id + "]")) != null) {
      ref1.prop('selected', true);
    }
    return this.$masterSelect.trigger('change');
  };

  VariantHelper.prototype._updatePrice = function(variant) {
    var $addToCartButton, $moneyEl, $priceFields, attribute, j, l, len, len1, priceField, productSettings, ref1;
    $addToCartButton = this.options.$addToCartButton;
    $priceFields = this.options.$priceFields;
    productSettings = this.options.productSettings;
    if (variant) {
      for (j = 0, len = $priceFields.length; j < len; j++) {
        priceField = $priceFields[j];
        $moneyEl = $(priceField).children('.money');
        ref1 = $moneyEl[0].attributes;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          attribute = ref1[l];
          if (attribute.name.indexOf("data-") > -1) {
            $moneyEl.attr(attribute.name, "");
          }
        }
      }
      if (variant.available) {
        $addToCartButton.val(productSettings.addToCartText).removeClass('disabled').removeAttr('disabled');
      } else {
        $addToCartButton.val(productSettings.soldOutText).addClass('disabled').attr('disabled', 'disabled');
      }
      if (variant.compare_at_price > variant.price) {
        $priceFields.find('.money:not(.original)').html(Shopify.formatMoney(variant.price, Shop.moneyFormat)).attr("data-currency-" + Shop.currency, Shopify.formatMoney(variant.price, Shop.moneyFormat)).attr("data-currency", Shop.currency);
        $priceFields.find('.money.original').html(Shopify.formatMoney(variant.compare_at_price, Shop.moneyFormat)).removeClass('hidden').attr("data-currency-" + Shop.currency, Shopify.formatMoney(variant.compare_at_price, Shop.moneyFormat)).attr("data-currency", Shop.currency);
      } else {
        $priceFields.find('.money:not(.original)').html(Shopify.formatMoney(variant.price, Shop.moneyFormat)).attr("data-currency-" + Shop.currency, Shopify.formatMoney(variant.price, Shop.moneyFormat)).attr("data-currency", Shop.currency);
        $priceFields.find('.money.original').addClass('hidden').attr("data-currency-" + Shop.currency, Shopify.formatMoney(variant.compare_at_price, Shop.moneyFormat)).attr("data-currency", Shop.currency);
      }
    } else {
      $addToCartButton.val(productSettings.unavailableText).addClass('disabled').attr('disabled', 'disabled');
    }
    return this._updateCurrency();
  };

  VariantHelper.prototype._updateImages = function(variant) {
    var index, ref1;
    index = variant != null ? (ref1 = variant.featured_image) != null ? ref1.position : void 0 : void 0;
    if (index == null) {
      return;
    }
    return this.options.$productThumbnails.eq(index - 1).trigger('click');
  };

  VariantHelper.prototype._updateHistory = function(variant) {
    var newUrl, variantUrl;
    if (!(this.enableHistory && (variant != null))) {
      return;
    }
    newUrl = [window.location.protocol, '//', window.location.host, window.location.pathname, '?variant=', variant.id];
    variantUrl = newUrl.join('');
    return window.history.replaceState({
      path: variantUrl
    }, '', variantUrl);
  };

  VariantHelper.prototype._variantChange = function(event) {
    var productOptions, variant;
    if (this.options.type === 'select') {
      this._setSelectLabel(event);
    }
    productOptions = this._getCurrentOptions();
    variant = this._getVariantFromOptions(productOptions);
    this._updateMasterSelect(variant);
    this._updatePrice(variant);
    this._updateImages(variant);
    return this._updateHistory(variant);
  };

  VariantHelper.prototype._updateCurrency = function() {
    if (Shop.currencySwitcher) {
      return $('.currency-switcher').trigger('switch-currency');
    }
  };

  return VariantHelper;

})();

window.ThemeView = (function(superClass) {
  extend(ThemeView, superClass);

  function ThemeView() {
    return ThemeView.__super__.constructor.apply(this, arguments);
  }

  ThemeView.prototype.el = document.body;

  ThemeView.prototype.initialize = function() {
    var body;
    body = $(document.body);
    this.isHome = body.hasClass("template-index");
    this.isCollection = body.hasClass("template-collection");
    this.isListCollections = body.hasClass("template-list-collections");
    this.isProduct = body.hasClass("template-product");
    this.isCart = body.hasClass("template-cart");
    this.isPage = body.hasClass("template-page");
    this.isPassword = body.hasClass("template-password");
    this.isGiftCardPage = body.hasClass("gift-card-template");
    this.isAccount = body.attr("class").indexOf("-customers-") > 0;
    window.Pacific = {};
    return Pacific.settings = {{ settings | json }};
  };

  ThemeView.prototype.render = function() {
    var j, len, ref1, rte;
    this.sections = new ThemeEditor();
    this.sections.register('header', this.header(this.sections));
    this.sections.register('footer', this.footer(this.sections));
    this.sections.register('slideshow', this.slideshow(this.sections));
    this.sections.register('featured-video', this.video(this.sections));
    this.sections.register('featured-images', this.featuredImages(this.sections));
    this.sections.register('collection-list', this.collectionList(this.sections));
    this.sections.register('featured-collection', this.featuredCollection(this.sections));
    new HeaderView({
      el: this.$el
    });
    ref1 = $(".rte");
    for (j = 0, len = ref1.length; j < len; j++) {
      rte = ref1[j];
      new RTEView({
        el: rte
      });
    }
    if (Pacific.settings["enable-sidebar"]) {
      new SidebarView({
        el: this.$(".sidebar")
      });
    }
    if (this.isCollection) {
      new CollectionView({
        el: this.$el
      });
    }
    if (this.isListCollections) {
      new ListCollectionsView({
        el: $(".collections-list")
      });
    }
    if (this.isProduct) {
      new ProductView({
        el: this.$el
      });
    }
    if (this.isCart) {
      new CartView({
        el: this.$el
      });
    }
    if (this.isAccount) {
      new AccountView({
        el: this.$el
      });
    }
    if (this.isPassword) {
      new PasswordView({
        el: this.$el
      });
    }
    if (this.isGiftCardPage) {
      new GiftCardView();
    }
    if ($("html").hasClass("lt-ie10")) {
      return this.inputPlaceholderFix();
    }
  };

  ThemeView.prototype.header = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new NavigationView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.slideshow = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new SlideshowView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      },
      onBlockSelect: function(event) {
        var instanceHandler;
        instanceHandler = this.instances[sections.getInstance(event).sectionId];
        return instanceHandler.lockSlide(event);
      },
      onBlockDeselect: function(event) {
        var instanceHandler;
        instanceHandler = this.instances[sections.getInstance(event).sectionId];
        return instanceHandler.unlockSlide();
      }
    };
  };

  ThemeView.prototype.video = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new VideoView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.featuredImages = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new FeaturedImagesView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.featuredCollection = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new FeaturedProductsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.collectionList = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new FeaturedCollectionsView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.footer = function(sections) {
    return {
      instances: {},
      init: function(instance) {
        return this.instances[instance.sectionId] = new FooterView({
          el: instance.$container
        });
      },
      onSectionLoad: function(event) {
        var instance;
        instance = sections.getInstance(event);
        if (this.instances[instance.sectionId] == null) {
          return this.init(instance);
        }
      },
      onSectionSelect: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        return (ref1 = this.instances[instance.sectionId]) != null ? ref1.update(instance.$container) : void 0;
      },
      onSectionUnload: function(event) {
        var instance, ref1;
        instance = sections.getInstance(event);
        if ((ref1 = this.instances[instance.sectionId]) != null) {
          ref1.remove();
        }
        return delete this.instances[instance.sectionId];
      }
    };
  };

  ThemeView.prototype.inputPlaceholderFix = function() {
    var input, j, len, placeholders, text;
    placeholders = $("[placeholder]");
    for (j = 0, len = placeholders.length; j < len; j++) {
      input = placeholders[j];
      input = $(input);
      if (!(input.val().length > 0)) {
        text = input.attr("placeholder");
        input.attr("value", text);
        input.data("original-text", text);
      }
    }
    placeholders.focus(function() {
      input = $(this);
      if (input.val() === input.data("original-text")) {
        return input.val("");
      }
    });
    return placeholders.blur(function() {
      input = $(this);
      if (input.val().length === 0) {
        return input.val(input.data("original-text"));
      }
    });
  };

  return ThemeView;

})(Backbone.View);

$(function() {
  window.theme = new ThemeView();
  return theme.render();
});
